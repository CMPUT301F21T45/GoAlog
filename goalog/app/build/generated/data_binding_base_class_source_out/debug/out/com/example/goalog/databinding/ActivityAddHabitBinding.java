// Generated by view binder compiler. Do not edit!
package com.example.goalog.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.goalog.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAddHabitBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CheckBox checkboxPrivacyAdd;

  @NonNull
  public final Button confirmButtonHabit;

  @NonNull
  public final TextView displayStartDateAddHabit;

  @NonNull
  public final CheckBox friCheckbox;

  @NonNull
  public final EditText habitReason;

  @NonNull
  public final EditText habitTitle;

  @NonNull
  public final CheckBox monCheckbox;

  @NonNull
  public final CheckBox satCheckbox;

  @NonNull
  public final Button selectDateAddHabit;

  @NonNull
  public final CheckBox sunCheckbox;

  @NonNull
  public final CheckBox thuCheckbox;

  @NonNull
  public final CheckBox tueCheckbox;

  @NonNull
  public final CheckBox wedCheckbox;

  private ActivityAddHabitBinding(@NonNull LinearLayout rootView,
      @NonNull CheckBox checkboxPrivacyAdd, @NonNull Button confirmButtonHabit,
      @NonNull TextView displayStartDateAddHabit, @NonNull CheckBox friCheckbox,
      @NonNull EditText habitReason, @NonNull EditText habitTitle, @NonNull CheckBox monCheckbox,
      @NonNull CheckBox satCheckbox, @NonNull Button selectDateAddHabit,
      @NonNull CheckBox sunCheckbox, @NonNull CheckBox thuCheckbox, @NonNull CheckBox tueCheckbox,
      @NonNull CheckBox wedCheckbox) {
    this.rootView = rootView;
    this.checkboxPrivacyAdd = checkboxPrivacyAdd;
    this.confirmButtonHabit = confirmButtonHabit;
    this.displayStartDateAddHabit = displayStartDateAddHabit;
    this.friCheckbox = friCheckbox;
    this.habitReason = habitReason;
    this.habitTitle = habitTitle;
    this.monCheckbox = monCheckbox;
    this.satCheckbox = satCheckbox;
    this.selectDateAddHabit = selectDateAddHabit;
    this.sunCheckbox = sunCheckbox;
    this.thuCheckbox = thuCheckbox;
    this.tueCheckbox = tueCheckbox;
    this.wedCheckbox = wedCheckbox;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAddHabitBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAddHabitBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_add_habit, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAddHabitBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.checkbox_privacy_add;
      CheckBox checkboxPrivacyAdd = ViewBindings.findChildViewById(rootView, id);
      if (checkboxPrivacyAdd == null) {
        break missingId;
      }

      id = R.id.confirm_button_habit;
      Button confirmButtonHabit = ViewBindings.findChildViewById(rootView, id);
      if (confirmButtonHabit == null) {
        break missingId;
      }

      id = R.id.display_start_date_add_habit;
      TextView displayStartDateAddHabit = ViewBindings.findChildViewById(rootView, id);
      if (displayStartDateAddHabit == null) {
        break missingId;
      }

      id = R.id.fri_checkbox;
      CheckBox friCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (friCheckbox == null) {
        break missingId;
      }

      id = R.id.habit_reason;
      EditText habitReason = ViewBindings.findChildViewById(rootView, id);
      if (habitReason == null) {
        break missingId;
      }

      id = R.id.habit_title;
      EditText habitTitle = ViewBindings.findChildViewById(rootView, id);
      if (habitTitle == null) {
        break missingId;
      }

      id = R.id.mon_checkbox;
      CheckBox monCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (monCheckbox == null) {
        break missingId;
      }

      id = R.id.sat_checkbox;
      CheckBox satCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (satCheckbox == null) {
        break missingId;
      }

      id = R.id.select_date_add_habit;
      Button selectDateAddHabit = ViewBindings.findChildViewById(rootView, id);
      if (selectDateAddHabit == null) {
        break missingId;
      }

      id = R.id.sun_checkbox;
      CheckBox sunCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (sunCheckbox == null) {
        break missingId;
      }

      id = R.id.thu_checkbox;
      CheckBox thuCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (thuCheckbox == null) {
        break missingId;
      }

      id = R.id.tue_checkbox;
      CheckBox tueCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (tueCheckbox == null) {
        break missingId;
      }

      id = R.id.wed_checkbox;
      CheckBox wedCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (wedCheckbox == null) {
        break missingId;
      }

      return new ActivityAddHabitBinding((LinearLayout) rootView, checkboxPrivacyAdd,
          confirmButtonHabit, displayStartDateAddHabit, friCheckbox, habitReason, habitTitle,
          monCheckbox, satCheckbox, selectDateAddHabit, sunCheckbox, thuCheckbox, tueCheckbox,
          wedCheckbox);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

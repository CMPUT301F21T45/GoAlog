package com.example.goalog;

import android.location.Location;
import android.net.Uri;
import android.os.Build;
import android.os.Build.VERSION_CODES;

import androidx.annotation.RequiresApi;

import java.time.LocalDate;
import java.util.UUID;
/* A HabitEvent is considered to have occurred only after a user finishes a scheduled event/habit
     *  Each HabitEvent is linked to a user's unique ID and each HabitEvent
     * can be uniquely identified by an eventID, generated by importing and using
     * java.util.UUID.  Each habitEvent can also contain optional location and/or comment
     * */
    public class HabitEvent {
        private Uri filePath;
        //declaring variables, the names should all be self-explanatory
        private String userID; //has to be unique
        private String eventID; // has to be unique as well
        private String eventComment; //optional event comment
        private LocalDate completeDate; // The date the event is completed
        private String habitTitle; // Name set by the user?
        // User can turn on location tracking for their events. Default = off
        private Boolean wantsLocation;
        private double latitude; // latitude of the location
        private double longitude; // longitude of the location
    /* Use only if needed. Longitude and latitude should be enough
    private double altitude;
    */
        // NEED THE USER CLASS TO IMPLEMENT SCHEDULED STUFF FOR USER STATS CALCULATION
        // private Boolean isScheduled;


        /**
         *
         */

        // By default Location set as false. Add more constructors as required

    /*  Each habit Event can be uniquely identified by their eventID, which is generated
        in the setEventID method (see below)
    */
        public HabitEvent(String eventID){

            this.eventID = eventID;
        }



        // Can use this constructor to associate a habit event to a user
        public HabitEvent(String userID, String eventID) {
            this.userID = userID;
            this.eventID = eventID;
            this.wantsLocation = false;
        }

        /* Will probably not need to use this constructor, but leaving it here for the time being
           Will comment it out/ delete it later after everything is merged and the app is tested
        * */
        public HabitEvent(String userID, String eventID, String habitTitle){
            this.userID = userID;
            this.eventID = eventID;
            this.habitTitle = habitTitle;
            this.wantsLocation = false;
        }


        //Location import requires a higher level of API than 16 (i think 21?)
        @RequiresApi(api = VERSION_CODES.O)
        public HabitEvent(HabitEvent h1) {

            // The required variables being attached to a habit event
            this.setUserID(h1.getUserID());
            this.setHabitTitle(h1.getHabitTitle());
            this.setEventID(h1.getEventID());
            this.setEventComment(h1.getEventComment());
            this.setCompleteDate(h1.getCompleteDate());
            // this.setPhoto(h1.getPhoto()); will deal with photo stuff later
            if (h1.wantsLocation()) {
                this.setLocation(h1.getLocation()); //requires API notation on Android studio
                this.wantsLocation = true;
            }else {
                this.wantsLocation = false;
            }

            //will deal with scheduled stuff later   this.scheduled = h1.getScheduled();
            // this.habitTitle = h1.getHabitName(); Ignore this


        }

        public HabitEvent(Uri filePath) {
            this.filePath = filePath;

        }

        //Getter for userID
        public Uri getFilePath(){
            return this.filePath;
        }

        //Setter for HabitTitle
        public void setFilePath(String habitTitle) {
            this.filePath = filePath;
        }




        //Setter for userID
        public void setUserID(String userID) {

            this.userID = userID;
        }
        //Getter for userID
        public String getUserID(){

            return this.userID;
        }

        //Setter for HabitTitle
        public void setHabitTitle(String habitTitle) {

            this.habitTitle = habitTitle;
        }

        //Getter for HabitTitle
        public String getHabitTitle() {
            return habitTitle;
        }

        //setter for EventID, eventID is uniquely set by the UUID class import
        public void setEventID(String eventID) {

            eventID = UUID.randomUUID().toString();

            this.eventID = eventID;
        }

        //getter for EventID
        public String getEventID() {
            return this.eventID;
        }


        // Setter for event comment. Comment is optional but cannot be more than 20 characters
        public void setEventComment(String eventComment){
            if (eventComment.length() <= 20) {
                this.eventComment = eventComment;
            } else {
                throw new IllegalArgumentException("Event Comment cannot be more than 20 characters.");
            }
        }

        //getter for Event Comment
        public String getEventComment(){

            return eventComment;
        }


        /*setter for event completion date. Date of completion has to be either today or sometime in
         * the past. That is, event completion date cannot be in the future
         * */
        public void setCompleteDate ( LocalDate completeDate){
            if (Build.VERSION.SDK_INT >= VERSION_CODES.O) {  //alt+enter made this pop-up. not sure what it is
                if (completeDate.isAfter(LocalDate.now())) {
                    throw new IllegalArgumentException("Date of Completion can not be in the future!");
                } else {
                    this.completeDate = completeDate;
                }
            }
        }
        //getter for event completion date
        public LocalDate getCompleteDate(){

            return completeDate;
        }



        // either the user wants location tracking or doesn't
        public boolean wantsLocation() {
            return this.wantsLocation;
        }


        /* The Location android import requires a higher minimum API than 16
         * if the user wants location, and the event location is NOT null, android.location.location
         * library/util is used to set the habit event's location (i.e longitude and latitude)
         *
         */
        @RequiresApi(api = VERSION_CODES.O)
        public void setLocation(Location eventLocation) {
            if (eventLocation != null) {
                this.wantsLocation = true;
                this.longitude = eventLocation.getLongitude();
                this.latitude = eventLocation.getLatitude();
            /* will only use altitude if required later. Commenting it out for now
            this.altitude = eventLocation.getAltitude();
            */
            }

        }
        /* If boolean wantsLocation is true, location is returned.
        If not, location is returned as 'null'
        * */
        public Location getLocation() {

            if (wantsLocation) {

                Location l1 = new Location("");
                l1.setLatitude(latitude);
                l1.setLongitude(longitude);
                return l1;

            } else {
                return null;
            }
        }







    }

